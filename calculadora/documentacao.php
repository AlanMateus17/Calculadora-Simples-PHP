# üìÑ Documenta√ß√£o T√©cnica ‚Äî Calculadora PHP com Sess√£o e Avalia√ß√£o de Express√µes

## üìå Vis√£o Geral

Este sistema simula uma **calculadora funcional** utilizando HTML (frontend) e PHP (backend), com suporte a opera√ß√µes b√°sicas (+, -, \*, /), controle por **sess√µes** e seguran√ßa b√°sica na avalia√ß√£o de express√µes. O sistema usa dois arquivos principais:

* `index.php`: Interface do usu√°rio (visualmente interativa)
* `process.php`: L√≥gica do processamento de dados (back-end PHP)

---

## üîÅ Sess√µes em PHP (`session_start()`)

A fun√ß√£o `session_start()` √© usada para iniciar uma **sess√£o PHP**. Isso permite **armazenar informa√ß√µes entre requisi√ß√µes HTTP**, como por exemplo:

```php
$_SESSION['input'] = "5+3";
```

Com isso, conseguimos manter o conte√∫do do visor da calculadora mesmo ap√≥s cliques consecutivos de bot√µes.

---

## üß† L√≥gica de Processamento (`process.php`)

### üîç Vari√°veis principais:

| Vari√°vel | Fun√ß√£o |
| --------------- | -------------------------------------------------- |
| `$input` | Armazena a express√£o atual do visor |
| `$operator` | Armazena o operador clicado (+, -, etc.) |
| `$number` | Armazena o n√∫mero clicado (0 a 9 ou "c") |
| `$equalPressed` | Booleano que indica se o bot√£o "=" foi pressionado |

---

## üßº Limpeza de dados (Bot√£o "C")

```php
if ($number === "c") {
$_SESSION['input'] = "";
header("Location: index.php");
exit();
}
```

Essa parte **reseta a calculadora** limpando a sess√£o e recarregando a p√°gina com o visor vazio.

---

## üî¢ Entrada de n√∫meros

```php
if ($number !== null && $number !== "c") {
$input .= $number;
$_SESSION['input'] = $input;
header("Location: index.php");
exit();
}
```

Se um n√∫mero for clicado, ele √© **concatenado ao valor atual do visor**. O operador `.=` adiciona o novo n√∫mero ao final da string existente.

---

## ‚ûï Entrada de operadores

```php
if ($operator !== null) {
$input .= $operator;
$_SESSION['input'] = $input;
header("Location: index.php");
exit();
}
```

De forma semelhante, se um operador for clicado, ele tamb√©m √© **concatenado** √† express√£o.

---

## üü∞ Avalia√ß√£o da express√£o matem√°tica

```php
if ($equalPressed) {
$rawInput = $input;
$safeInput = preg_replace('/[^0-9+\-*\/().]/', '', $rawInput);
```

* `preg_replace()` remove caracteres inv√°lidos (ex: letras ou s√≠mbolos estranhos)
* Isso √© uma **medida de seguran√ßa** m√≠nima ao usar `eval()`

---

### ‚öôÔ∏è Execu√ß√£o com `eval()`

```php
$result = eval("return $safeInput;");
```

A fun√ß√£o `eval()` **executa a string como se fosse c√≥digo PHP**. Exemplo:

```php
eval("return 5+3;"); // retorna 8
```

---

### üõë Tratamento de Erros

```php
if ($result === false || $result === null) {
$_SESSION['input'] = "Erro!";
} else {
$_SESSION['input'] = "$rawInput = $result";
}
```

* Se algo der errado: mostra `"Erro!"`
* Se funcionar: exibe a express√£o completa com o resultado final

---

## üîÅ Redirecionamento com `header()`

```php
header("Location: index.php");
exit();
```

A cada a√ß√£o, o c√≥digo redireciona a p√°gina para o `index.php`, que **exibe a express√£o ou resultado atualizado** no visor da calculadora. Isso permite que o usu√°rio interaja sem ver diretamente os bastidores do PHP.

---

## üß† Explica√ß√£o do fluxo completo

1. O usu√°rio clica em um bot√£o (n√∫mero ou operador)
2. A requisi√ß√£o √© enviada para `process.php`
3. O PHP analisa o que foi clicado:

* Se foi n√∫mero ou operador, adiciona ao visor
* Se foi "C", limpa tudo
* Se foi "=", avalia a express√£o
4. O PHP salva o novo estado na sess√£o
5. Redireciona para `index.php` com a nova express√£o ou resultado

---

## ‚ö†Ô∏è Seguran√ßa (sobre `eval()`)

Embora usado aqui para fins did√°ticos, o uso de `eval()` **pode ser perigoso** se n√£o for tratado corretamente. Para evitar riscos:

* Nunca aceite entrada direta do usu√°rio sem valida√ß√£o
* Nunca use `eval()` em ambientes de produ√ß√£o sem sanitiza√ß√£o completa
* Evite `eval()` se puder usar alternativas como **parser matem√°tico pr√≥prio**

---

## üõ† Recursos utilizados no projeto

| Recurso | Descri√ß√£o |
| ---------------- | --------------------------------------------------- |
| PHP | Linguagem back-end que processa requisi√ß√µes |
| Sessions | Armazenamento de dados entre cliques |
| HTML + CSS | Interface visual (frontend da calculadora) |
| Bot√µes `submit` | Enviam os dados ao `process.php` |
| `eval()` | Executa express√µes matem√°ticas como c√≥digo PHP |
| `preg_replace()` | Faz valida√ß√£o e limpeza de express√µes |
| `header()` | Redireciona automaticamente a tela ap√≥s cada clique |

## üìö Conclus√£o
Este sistema de calculadora em PHP √© um exemplo did√°tico de como integrar frontend e backend, utilizando sess√µes para manter o estado da aplica√ß√£o. Atrav√©s deste projeto, os alunos podem aprender sobre manipula√ß√£o de dados, seguran√ßa b√°sica e a import√¢ncia de validar entradas antes de process√°-las.